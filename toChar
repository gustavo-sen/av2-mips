.eqv index_num $s1
.eqv digito $s2
.eqv index_lw $a0
.eqv divisor $a1
.eqv index_sto $t9
.data
numeros: .word 691,-86,-617,703,63,8,75,-65,-10,99,-895,9,39,87,23,8,45,50,865,55,18,698,98,64,613,360,4,83,-353,408,711,-13,353,419,57,-396,26,34,-40,343,21,170,27,13,37,46,-71,420,167,60,50,675,-898,349,937,21,140,737,-635,99,720,-72,24,245,601,656,48,256,625,530,-19,80,51,-896,88,150,326,90,991,39,49,312,386,0,-900,455,91,38,475,-880,76,774,78,876,48,827,309,52,-444,73
virgula: .ascii ", "
.align 2
menos: .ascii "-"
.align 2
numToChar: .space 400
.align 2
numero: .space 4
tam: .word 100

.text
#inicializa
li $t0 , 0 
lw $t1 , tam
#sub $t1 , $t1 , 1

toChar:
beq $t0, $t1, fin
addi $t0, $t0, 1
li divisor , 10
lw $t3, numeros(index_lw)
addi index_lw, index_lw, 4
li index_num, 0
blt $t3, 0, negativo

#loop numero positivo
loop:	
		#vai fazer o loop do numero, se achar que o digito e  /0 vai pegar os registradores e armazenar em num to char
 div $t3, divisor
 mflo $t3
 mfhi digito
 addi digito, digito, 0x30 #adiciona 30 para tabela ascii
 sw digito, numero(index_num)
 beqz $t3, exitloop #exitloop sem sinal negativo
 addi index_num, index_num, 4
j loop

exitloopN:
#tem que salvar o "-" e  incrementar o index de store
lw $s4, menos
sb $s4, numToChar(index_sto)
addi index_sto, index_sto, 1

exitloop:
lw  $s3, numero(index_num)
beq $s3, 0, separador #caso nao esteja mandando  o numero completo, joga isso aqui pro fianla 

sb $s3, numToChar(index_sto)
sub index_num, index_num, 4
addi index_sto, index_sto, 1



#salva a virgula
j exitloop


separador:
beq $t0, $t1, fin
lw $s4, virgula
sb $s4, numToChar(index_sto)
addi index_sto, index_sto, 1
j toChar


negativo: #caso o numero seja negativo ele multiplica por 2
li divisor , 10
loopN:


		#vai fazer o loop do numero, se achar que o digito e  /0 vai pegar os registradores e armazenar em num to char
 div $t3, divisor
 mflo $t3
 mfhi digito
 mul digito, digito, -1
 addi digito, digito, 0x30 #adiciona 30 para tabela ascii
 sw digito, numero(index_num)
 beqz $t3, exitloopN
 addi index_num, index_num, 4
j loopN
fin:
li $v0, 10
syscall
